export const ProjectDetailInfo = [
  {
    mainImage:
      "https://res.cloudinary.com/dgl5jcwgb/image/upload/v1700377042/img_afztvh.png",
    videos: [
      "https://framerusercontent.com/images/0L4ByzyLonZaaYGw9F7w0kkuEo.gif",
    ],
    name: "Vyzon",
    description:
      "IS A VERSATILE AND CUSTOM-TAILORED PROGRAMMING LANGUAGE DESIGNED TO PROVIDE CODERS WITH THE FREEDOM TO SHAPE THEIR CODING EXPERIENCES.",
    summary:
      "Designed a custom programming language, built an interpreter, and developed language-processing tools, showcasing language development expertise.",
    gitLink: "/",
    webLink: "/",
    techStack: [
      "JavaScript, React, Interpreter, Tokenizer, Parser, Code Generator",
    ],
    projectInfo: [
      {
        type: "image",
        url: "https://res.cloudinary.com/dgl5jcwgb/image/upload/v1722000663/Tokenizer_lxxzfh.png",
        head: "TOKENIZER",
        body: [
          "The tokenizer is an essential component in the language processing pipeline, responsible for transforming raw input into a series of meaningful tokens. It meticulously scans the input string, breaking it down into tokens that represent various elements such as keywords, operators, and identifiers.",
          "It efficiently handles whitespace and comments, both single-line and multi-line, ensuring they do not interfere with the parsing process. The tokenizer also identifies symbols and delimiters, including semicolons, braces, and parentheses, which are crucial for syntactical structure.",
          "Moreover, it recognizes a range of operators—relational, logical, and assignment—as well as important language keywords such as let, if, else, for, and while. This comprehensive tokenization ensures that the input code is clean, structured, and ready for the subsequent parsing phase, laying a strong foundation for accurate language processing.",
        ],
      },
      {
        type: "image",
        url: "https://res.cloudinary.com/dgl5jcwgb/image/upload/v1722000680/Parser_zuvucf.png",
        head: "PARSER",
        body: [
          "The parser plays a pivotal role in the language processing pipeline by converting a sequence of tokens into a structured abstract syntax tree (AST). It interprets the tokens generated by the tokenizer and organizes them according to the grammatical rules of the language.",
          "By analyzing the token sequence, the parser identifies and constructs various syntactical constructs such as statements, expressions, and blocks. It handles different programming constructs, including variable declarations, control flow statements and function definitions, ensuring the input code adheres to the defined language syntax.",
          "The parser's ability to manage nested structures and various statement types allows it to build a comprehensive AST that reflects the hierarchical nature of the code. This structured representation is crucial for further stages, such as interpretation or compilation, providing a clear and logical view of the code's semantics.",
        ],
      },
      {
        type: "image",
        url: "https://res.cloudinary.com/dgl5jcwgb/image/upload/v1722000694/Interpreter_ahartu.png",
        head: "INTERPRETER",
        body: [
          "The interpreter is the final stage in the language processing pipeline, responsible for executing the abstract syntax tree (AST) produced by the parser. It takes the structured representation of the code and carries out the actual computation, providing the desired outputs.",
          "Through the interpreter, the language can dynamically evaluate expressions, execute statements, and manage various data types and operations. It handles function calls, variable assignments, and control flow constructs, ensuring that the code behaves as intended during execution.",
          "By directly interpreting the AST, the interpreter allows for immediate feedback and execution of the code, making it ideal for scripting and interactive environments. Its role is crucial in translating high-level language constructs into actions that the computer can perform, bridging the gap between written code and executable instructions.",
        ],
      },
      {
        type: "image",
        url: "https://res.cloudinary.com/dgl5jcwgb/image/upload/v1722001815/documentation_k3jq9w.png",
        head: "DOCUMENTATION",
        body: [
          "The documentation for the language is meticulously crafted to guide users through its features and capabilities, ensuring they can effectively leverage the language for their programming needs. It provides a comprehensive overview of the language's syntax, semantics, and usage patterns, enabling both newcomers and experienced developers to quickly get up to speed.",
          "With clear explanations and practical examples, the documentation covers everything from basic constructs and operators to advanced features like functions and classes. It offers step-by-step instructions and illustrative code snippets that make it easy to understand and apply the language's constructs in real-world scenarios.",
          "Additionally, the documentation serves as a valuable reference for troubleshooting and optimizing code, providing insights into common pitfalls and best practices. Its well-organized structure and user-friendly format ensure that developers can efficiently find the information they need to write, debug, and enhance their code.",
        ],
      },
    ],
  },
];
